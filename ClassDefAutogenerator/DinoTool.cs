using HtmlAgilityPack;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;

namespace ClassDefAutogenerator
{
    class DinoTool
    {
        public static void RunDinoTool(string outDir)
        {
            //Request dino table
            List<DinoEntry> dinos = new List<DinoEntry>();
            string csFile = "";
            //Connect to this site and get new data
            var web = new HtmlWeb();
            var doc = web.Load("https://ark.gamepedia.com/Creatures");
            //Find the classname
            var nodes = doc.DocumentNode.Descendants().Where(x => x.HasClass("cargo-creature-table")).ToArray();
            //Ensure there is not more than one
            if (nodes.Length != 1)
                throw new Exception("Too many or too few nodes!");
            //Convert the table node into a list.
            var enteries = nodes[0].Descendants().Where(x => x.Name == "tr" && x.Descendants().Where(y => y.Name == "th").Count() == 0).ToArray();
            //Convert each of these into the table
            List<string> download_urls = new List<string>();
            List<string> download_urls_output = new List<string>();
            List<string> dino_classnames = new List<string>();
            for (int i = 0; i < enteries.Length; i++)
            {
                var e = enteries[i];
                var inner = e.Descendants().Where(x => x.Name == "td").ToArray();

                //Convert to class
                DinoEntry entry = new DinoEntry
                {
                    class_name = inner[10].InnerText.Trim(' '),
                    screen_name = inner[0].InnerText.Trim(' ')
                };

                //Get image url
                string imgUrl = inner[0].Descendants().Where(x => x.Name == "img").First().GetAttributeValue("src", "").ToString();
                bool isMissingImg = imgUrl.Contains("Missing");

                //Back up
                download_urls.Add(imgUrl);
                download_urls_output.Add(outDir + $"icons/lq/{entry.class_name}.png");

                download_urls.Add(imgUrl.Replace("30px", "240px"));
                download_urls_output.Add(outDir + $"icons/hq/{entry.class_name}.png");

                //Update entry
                entry.icon_url = $"https://ark.romanport.com/resources/dinos/icons/hq/{entry.class_name}.png";
                entry.thumb_icon_url = $"https://ark.romanport.com/resources/dinos/icons/lq/{entry.class_name}.png";

                //Check if already exists
                if(dino_classnames.Contains(entry.class_name))
                {
                    Console.WriteLine($"Value already exists! {entry.class_name}");
                } else
                {
                    //Add entry
                    dinos.Add(entry);

                    //Add
                    dino_classnames.Add(entry.class_name);

                    //Add to "file"
                    csFile += WriteIndentedData("{", 0);
                    csFile += WriteIndentedData($"\"{entry.class_name}\",", 1);
                    csFile += WriteIndentedData("new DinoEntry {", 1);
                    csFile += WriteIndentedData($"screen_name = \"{entry.screen_name}\",", 2);
                    csFile += WriteIndentedData($"class_name = \"{entry.class_name}\",", 2);
                    csFile += WriteIndentedData($"thumb_icon_url = \"{entry.thumb_icon_url}\",", 2);
                    csFile += WriteIndentedData($"icon_url = \"{entry.icon_url}\"", 2);
                    csFile += WriteIndentedData("}", 1);
                    csFile += WriteIndentedData("},", 0);
                }

                
            }

            //Loop through downloads
            /*Parallel.For(0, download_urls.Count, (int i) => {
                using (WebClient wc = new WebClient())
                    wc.DownloadFile(download_urls[i], download_urls_output[i]);
            });*/

            //Write CS file
            csFile = $"namespace ArkSaveEditor.Entities.LowLevel.AutoGeneratedClasses\n{{\n\tpublic class DinoEntryTable\n\t{{\n\t\tpublic Dictonary<string, DinoEntry> dinos = new Dictonary<string, DinoEntry> {{\n{csFile.TrimEnd(',')}\t\t}};\n\t}}\n}}";
            File.WriteAllText(outDir + "DinoEntryTable.cs", csFile);
            File.WriteAllText(outDir + "dinos.json", JsonConvert.SerializeObject(dinos));
        }

        void ConvertAndSaveImage()
        {

        }

        static string WriteIndentedData(string content, int indentOffset)
        {
            string src;
            src = "\t\t\t";
            for (int i = 0; i < indentOffset; i++)
                src += "\t";
            src += content;
            src += "\n";
            return src;
        }
    }

    class DinoEntry
    {
        public string screen_name;
        public string class_name;
        public string icon_url;
        public string thumb_icon_url;
    }
}
