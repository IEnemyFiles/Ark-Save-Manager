using HtmlAgilityPack;
using System;
using System.Linq;
using System.IO;

namespace ClassDefAutogenerator
{
    class Program
    {
        static string saveLocation = @"C:\Users\Roman\source\repos\ArkSaveEditor\ArkSaveEditor\Entities\LowLevel\AutoGeneratedClasses\";

        static void Main(string[] args)
        {
            Console.WriteLine("Fetching dinos...");
            GrabAndSaveEnum("https://ark.gamepedia.com/Creatures", "cargo-creature-table", "DinoClasses", 10, 0);



        }

        static void GrabAndSaveEnum(string url, string nodeName, string enumName, int col1, int col2)
        {
            string[][] dinoTable = GrabTableFromWeb(url, nodeName);
            string dinoData = GenerateEnumFromHtmlTable(enumName, dinoTable, col1, col2);
            File.WriteAllText(saveLocation + enumName + ".cs", dinoData);
        }

        static string[][] GrabTableFromWeb(string url, string tableClassName)
        {
            //Connect to this site and get new data
            var web = new HtmlWeb();
            var doc = web.Load(url);
            //Find the classname
            var nodes = doc.DocumentNode.Descendants().Where(x => x.HasClass(tableClassName)).ToArray();
            //Ensure there is not more than one
            if (nodes.Length != 1)
                throw new Exception("Too many or too few nodes!");
            //Convert the table node into a list.
            var enteries = nodes[0].Descendants().Where(x => x.Name == "tr" && x.Descendants().Where(y => y.Name == "th").Count() == 0).ToArray();
            //Convert each of these into the table
            string[][] output = new string[enteries.Length][];
            for(int i = 0; i<enteries.Length; i++)
            {
                var e = enteries[i];
                var inner = e.Descendants().Where(x => x.Name == "td").ToArray();

                string[] d = new string[inner.Length];
                for(int j = 0; j<d.Length; j++)
                {
                    d[j] = inner[j].InnerText.Trim(' ');
                }

                output[i] = d;
            }

            return output;
        }

        static string GenerateEnumFromHtmlTable(string name, string[][] data, int dataCol, int commentCol)
        {
            string[] dataData = new string[data.Length];
            string[] commentData = new string[data.Length];
            for(int i = 0; i<data.Length; i++)
            {
                dataData[i] = data[i][dataCol];
                commentData[i] = data[i][commentCol];
            }
            return GenerateEnumFile(name, dataData, commentData);
        }

        static string GenerateCSharpFile(string content)
        {
            //Generate the base
            string output = "using System; \nusing System.Text;\n\nnamespace ArkSaveEditor.Entities.LowLevel.AutoGeneratedClasses\n{\n";
            output += content;
            output += "\n}\n";
            return output;
        }

        static string GenerateEnumFile(string name, string[] data, string[] comment)
        {
            //Generate enum table
            string output = $"\tpublic enum {name}\n\t{{\n";
            string[] exitingItems = new string[data.Length];
            for (int i = 0; i < data.Length; i++)
            {
                if(!exitingItems.Contains(data[i]))
                    output += $"\t\t{data[i]}, /*{comment[i]}*/\n";
                exitingItems[i] = data[i];
            }
            output += "\t}";
            return GenerateCSharpFile(output);
        }
    }
}
