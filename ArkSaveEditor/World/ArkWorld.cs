using System;
using System.Collections.Generic;
using System.Text;
using ArkSaveEditor.Entities.LowLevel;
using ArkSaveEditor.Entities.LowLevel.DotArk;
using System.Linq;
using ArkSaveEditor.Entities.LowLevel.AutoGeneratedClasses;
using ArkSaveEditor.World.WorldTypes;

namespace ArkSaveEditor.World
{
    /// <summary>
    /// Provides high-level access to the Ark saves. These will need to be able to be saved back to a file.
    /// </summary>
    public class ArkWorld
    {
        /// <summary>
        /// The name of the map (for example, "Extinction", "Aberration")
        /// </summary>
        public string map;

        /// <summary>
        /// Time of day in-game.
        /// </summary>
        public float gameTime;

        /// <summary>
        /// The number of days that have passed.
        /// </summary>
        public int day;

        //GameObjects
        /// <summary>
        /// This contains the internal array of sources. Some of these could be null if they've been deleted.
        /// </summary>
        public List<DotArkGameObject> sources { get; }

        /// <summary>
        /// Grabs all standard GameObjects by their classname.
        /// </summary>
        /// <param name="classname">The string classname.</param>
        /// <returns></returns>
        public List<HighLevelArkGameObjectRef> GetGameObjectsByClassname(string classname)
        {
            List<HighLevelArkGameObjectRef> refs = new List<HighLevelArkGameObjectRef>();
            //Find all GameObjects in the sources. We can't use Linq because we need the the indexes.
            for (int i = 0; i<sources.Count; i++)
            {
                var src = sources[i];
                if(src != null)
                {
                    if (src.classname.classname == classname)
                        refs.Add(new HighLevelArkGameObjectRef(this, i));
                }
            }
            return refs;
        }

        //GameObject types
        public List<ArkDinosaur> dinos = new List<ArkDinosaur>();

        /// <summary>
        /// Convert the map from a low-level object to a high-level object.
        /// </summary>
        /// <param name="arkFile"></param>
        public ArkWorld(DotArkFile arkFile)
        {
            //Set our sources first
            sources = arkFile.gameObjects;
            //Do some analysis to find objects
            for(int i = 0; i<sources.Count; i++)
            {
                var g = sources[i];
                string classname = g.classname.classname;
                //Check if this is a dinosaur by matching the classname.
                if (Enum.TryParse<DinoClasses>(classname, out DinoClasses dinoClass))
                {
                    //This is a dinosaur.
                    dinos.Add(new ArkDinosaur(this, this.sources[i]));
                }
            }
            //Get the other metadata
            map = arkFile.meta.binaryDataNames[0];
            gameTime = arkFile.gameTime;
        }
    }
}
